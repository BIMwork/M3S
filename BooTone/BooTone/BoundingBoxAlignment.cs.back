using System;
using System.Collections.Generic;
using System.Linq;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;

namespace BooTone
{

    public class WidthTextNote
    {
        public ElementId elId;
        public ElementId tmpElId;
        public double with;
        public double height;

        public WidthTextNote(ElementId elId, ElementId tmpElId, double with, double height)
        {
            this.elId = elId;
            this.tmpElId = tmpElId;
            this.with = with;
            this.height = height;
        }
    }

    [TransactionAttribute(TransactionMode.Manual)]
    public class BoundingBoxAlignment : IExternalCommand
    {
        private const string BOUNDING_BOX_ALIGNMENT = "BOUNDING_BOX_ALIGNMENT";
        private const string CREATE_TMP_TEXT_NOTE = "CREATE_TMP_TEXT_NOTE";
        private const string DELETE_TMP_TEXT_NOTE = "DELETE_TMP_TEXT_NOTE";
        private const string TEXT_NOTE_CATEGOR_NAME = "Text Notes";

        Result IExternalCommand.Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            try
            {
                // get UIDocument
                UIDocument uiDoc = commandData.Application.ActiveUIDocument;

                // get Document
                Document doc = uiDoc.Document;

                // get View
                View view = doc.ActiveView;

                /* IList<Reference> refEls = uiDoc.Selection.PickObjects(ObjectType.Element);
                 List<ElementId> ids = (from Reference r in refEls select r.ElementId).ToList();*/

                List<ElementId> ids = (List<ElementId>)uiDoc.Selection.GetElementIds();

                int count = ids.Count();
                if (count <= 0)
                {
                    message = "1つ以上を選択してください。";
                    return Result.Failed;
                }

                // caclu width
                List<WidthTextNote> widthTargets = getTargetWidth(ref doc, ref view, ref ids);

                // update width
                using (Transaction trans = new Transaction(doc, BOUNDING_BOX_ALIGNMENT))
                {
                    trans.Start();

                    for (int i = 0; i < count; i++)
                    {
                        Element el = doc.GetElement(ids[i]);
                        if (el == null || el.Category.Name != TEXT_NOTE_CATEGOR_NAME)
                        {
                            continue;
                        }
                        // handle agliment
                        agliment(ref el, ref widthTargets);
                    }

                    trans.Commit();
                }
                return Result.Succeeded;
            }
            catch (Exception ex)
            {
                message = ex.Message;
                return Result.Failed;
            }
        }


        private List<WidthTextNote> getTargetWidth(ref Document doc, ref View view, ref List<ElementId> ids)
        {
            List<WidthTextNote> targetWidths = new List<WidthTextNote>();

            // caclu width
            int count = ids.Count();
            using (Transaction trans = new Transaction(doc, CREATE_TMP_TEXT_NOTE))
            {
                trans.Start();

                for (int i = 0; i < count; i++)
                {
                    Element el = doc.GetElement(ids[i]);
                    if (el == null || el.Category.Name != TEXT_NOTE_CATEGOR_NAME)
                    {
                        continue;
                    }
                    TextNote txtNote = el as TextNote;
                    TextNote tmpTxtNote = TextNote.Create(doc, view.Id, txtNote.Coord, 
                        txtNote.Text, txtNote.GetTypeId());

                    // push to array
                    WidthTextNote widthTextNote = new WidthTextNote(el.Id, tmpTxtNote.Id, 
                        tmpTxtNote.Width, tmpTxtNote.Height);
                    targetWidths.Add(widthTextNote);
                }
                trans.Commit();
            }

            // delete
            count = targetWidths.Count();
            using (Transaction trans = new Transaction(doc, DELETE_TMP_TEXT_NOTE))
            {
                trans.Start();

                for (int i = 0; i < count; i++)
                {
                    Element el = doc.GetElement(targetWidths[i].tmpElId);
                    TextNote txtNote = el as TextNote;
                    double width = txtNote.Width;
                    width = Math.Round(width, 3);
                    if (width < txtNote.Width)
                    {
                        width = width + 0.001;
                    }
                    targetWidths[i].with = width;
                    doc.Delete(targetWidths[i].tmpElId);
                }
                trans.Commit();
            }
            return targetWidths;
        }

        private WidthTextNote findTargetWidthsByElId(ref Element el, ref List<WidthTextNote> widthTargets)
        {
            WidthTextNote targetWidth = null;
            int count = widthTargets.Count();
            for (int i = 0; i < count; i++)
            {
                if (widthTargets[i].elId.IntegerValue == el.Id.IntegerValue)
                {
                    targetWidth = widthTargets[i];
                    break;
                }
            }
            return targetWidth;
        }

        // bounding box agliment
        private void agliment(ref Element el, ref List<WidthTextNote> targetWidths)
        {
            TextNote txtNote = el as TextNote;
            WidthTextNote widthTextNote = findTargetWidthsByElId(ref el, ref targetWidths);
            if (widthTextNote != null)
            {
                txtNote.Width = widthTextNote.with;
            }
        }
    }
}
